<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Neovim配置(纯新手篇)</title>
    <link href="/2022/09/19/Neovim%E9%85%8D%E7%BD%AE(%E7%BA%AF%E6%96%B0%E6%89%8B%E7%AF%87)/"/>
    <url>/2022/09/19/Neovim%E9%85%8D%E7%BD%AE(%E7%BA%AF%E6%96%B0%E6%89%8B%E7%AF%87)/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="为什么会写这篇文章？"><a href="#为什么会写这篇文章？" class="headerlink" title="为什么会写这篇文章？"></a>为什么会写这篇文章？</h2><ul><li>之前学习了一些vim的常用命令，并且在ide上安装了ideavim插件，对vim的基本使用有了一定的了解，想要跟进一步尝试脱离ide在终端上直接编码</li><li>看到好几次有同事电脑坏了只有一时申请不到新的电脑，即使申请到了也需要重新配一遍环境（配环境是真滴烦）</li><li>公司是给每个人配置了一台开发机的，开发机和公司的一些环境是互通的，如果能够直接在开发机上进行编码，可以省去很多部署等操作的时间</li><li>当然更多的单纯的感兴趣想配置着玩一下，毕竟之前的本地ide加上一些插件也能有不错的开发效率，很多ide的功能也的确是很方便的</li></ul><h2 id="一些选择"><a href="#一些选择" class="headerlink" title="一些选择"></a>一些选择</h2><h3 id="Neovim"><a href="#Neovim" class="headerlink" title="Neovim"></a>Neovim</h3><p>　　Neovim是一个社区驱动的开源项目，是Vim文本编辑器的一个分叉版本，它的构建使Vim更容易为核心开发人员维护。它是Vim文本编辑器的一个增强的开箱即用版本，或者您可以说，它是一个更简化的Vim，它使得集成比使用Vim容易得多。（摘自:<a href="https://juejin.cn/s/neovim%E5%92%8Cvim%E5%8C%BA%E5%88%AB%EF%BC%89">https://juejin.cn/s/neovim%E5%92%8Cvim%E5%8C%BA%E5%88%AB）</a></p><p>　　我选择用Neovim而不是vim其实也没什么特别的理由，只是单纯觉得Neovim比较新，历史包袱不会那么重。网上关于vim和Neovim的讨论也挺多的，但由于我都没有用过所以感触不深。考虑到这两者相似性较高学习了其中一个对于另一个的学习成本会降低不少，所以就凭直觉挑了一个先开始上手了。</p><h3 id="Spacevim"><a href="#Spacevim" class="headerlink" title="Spacevim"></a>Spacevim</h3><p>SpaveVim 是一个社区维护的 Vim 配置，可以省去一些vim从头开始配置所花费的时间，详细的可以直接看SpaveVim的文档（<a href="https://spacevim.org/%EF%BC%89%E3%80%82%E7%B1%BB%E4%BC%BC%E7%9A%84%E8%BF%98%E6%9C%89spf13%E3%80%81amix%E7%AD%89%E3%80%82">https://spacevim.org/）。类似的还有spf13、amix等。</a></p><h4 id="为什么我不用Spacevim"><a href="#为什么我不用Spacevim" class="headerlink" title="为什么我不用Spacevim"></a>为什么我不用Spacevim</h4><ul><li>正如我上文提到的写这篇文章很大原因是兴趣使然，单纯的就是想折腾一些东西，使用Spacevim这种现成的配置会减少很多的乐趣</li><li>vim很大的一个特性就是高度的定制化，使用Spacevim其实减弱了vim的这种特性，当然一开始用Spacevim来上手可能也不失为一个好的选择</li></ul><h1 id="配置过程"><a href="#配置过程" class="headerlink" title="配置过程"></a>配置过程</h1><p>　　由于我们开发机环境是linux，本文下面的配置均以此作为前提条件</p><h2 id="Neovim安装"><a href="#Neovim安装" class="headerlink" title="Neovim安装"></a>Neovim安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">为了使用add-apt-repository，需要先安装下面的包</span><br>sudo apt-get install software-properties-common<br><span class="hljs-meta prompt_"># </span><span class="language-bash">stable version</span><br>sudo add-apt-repository ppa:neovim-ppa/stable<br><span class="hljs-meta prompt_"># </span><span class="language-bash">dev version</span><br>sudo add-apt-repository ppa:neovim-ppa/unstable<br>sudo apt update<br>sudo apt upgrade<br><span class="hljs-meta prompt_"># </span><span class="language-bash">前面几步主要是为了能安装最新版本的Neovim</span><br>sudo apt-get install neovim<br></code></pre></td></tr></table></figure><p>　　上面的安装方法我尝试和很多遍，始终安装的是0.3.4的版本，不知道是什么原因(update还是没取到最新的包？)，后面我就改用Homebrew安装了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">brew install neovim<br></code></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">nvim --version<br>// 可以用这个命令看看有没有安装成功<br></code></pre></td></tr></table></figure><h2 id="插件管理器"><a href="#插件管理器" class="headerlink" title="插件管理器"></a>插件管理器</h2><h3 id="插件管理器选择"><a href="#插件管理器选择" class="headerlink" title="插件管理器选择"></a>插件管理器选择</h3><p>vim的许多扩展功能都是通过扩展插件的形式来实现的，这时候一款好用的插件管理工具显得尤为重要，所以首先需要选择一个插件管理器，我选择的是<strong>vim-plug</strong>，选择 vim-plug , 是因为它:</p><ul><li><p>简洁且快速, 没有外部依赖, 整个插件只有一个文件</p></li><li><p>配置简单</p></li><li><p><strong>按需加载</strong>（意味着更快启动）</p></li><li><p><strong>异步加载插件</strong>，支持并行安装&#x2F;更新插件</p></li><li><p>可以查看和回滚更新</p></li></ul><p>当然以上都是网上的一些说法，我真正选择它的原因其实是因为用它的人比较多，有很多人都推荐了这个插件管理器，在不了解的情况下遵从大多数人的选择做一个开始总是不会有什么大问题的。</p><h3 id="插件管理器安装"><a href="#插件管理器安装" class="headerlink" title="插件管理器安装"></a>插件管理器安装</h3><ul><li>下载<strong>vim-plug</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sh -c &#x27;curl -fLo &quot;$&#123;XDG_DATA_HOME:-$HOME/.local/share&#125;&quot;/nvim/site/autoload/plug.vim --create-dirs \<br>       https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim&#x27;<br></code></pre></td></tr></table></figure><ul><li>添加下列代码到**~&#x2F;.config&#x2F;nvim&#x2F;init.vim**(没有就自己创建)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">call plug#begin()<br>  &quot; 放置插件<br>  Plug &#x27;scrooloose/nerdtree&#x27;<br>call plug#end()<br></code></pre></td></tr></table></figure><ul><li>在Neovim中执行如下命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">:PlugInstall<br></code></pre></td></tr></table></figure><h2 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h2><p>　　在安装完了插件管理器之后，我们需要的就是按需选择需要的插件进行安装以及配置就行了，这里建议先去网上看一些相关的配置教程以及一些基础的配置是什么意思，比如键位的映射等，接着可以直接找一些比较好的配置参考着看一下，从中选取自己当前需要的一些配置。</p><h3 id="lt-C-w-gt-的映射"><a href="#lt-C-w-gt-的映射" class="headerlink" title="**&lt;C-w&gt;**的映射"></a>**&lt;C-w&gt;**的映射</h3><p>这里记录一下配置时遇见的一个小坑，问题的起因是我想把&lt;C-w&gt;映射成关闭标签页的快捷键，但是却发现在使用这个快捷键的时候会有很长时间的延时，往往是要一秒过后才能生效。</p><p>这其实是因为&lt;C-w&gt;是一个比较特殊的快捷键它往往还会有很多其他的映射，比如说如果同时有两个映射一个是&lt;C-w&gt;本身，一个是&lt;C-w&gt;f，那么在我们按下&lt;C-w&gt;的时候就会产生延时，这是因为vim无法确认我们到底是想用&lt;C-w&gt;还是&lt;C-w&gt;f，它会等待一段时间看我们有没有后续输入。</p><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>　　这里附上一份初版的配置文件，我后续应该会改用全lua来进行配置，主要是考虑到lua的配置具有更好的模块化，整体看起来能更加清晰，同时它的性能也会比较好一些</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-string">&quot; ============= Vim-Plug ============== &quot;</span>&#123;&#123;&#123;<br><br><span class="hljs-comment">&quot; auto-install vim-plug</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">empty</span>(<span class="hljs-built_in">glob</span>(<span class="hljs-string">&#x27;~/.config/nvim/autoload/plug.vim&#x27;</span>))<br>  <span class="hljs-keyword">silent</span> !curl -fLo ~/.config/nvim/autoload/plug.<span class="hljs-keyword">vim</span> --create-dirs<br>    \ https://raw.githubusercontent.<span class="hljs-keyword">com</span>/junegunn/<span class="hljs-keyword">vim</span>-plug/master/plug.<span class="hljs-keyword">vim</span><br>  <span class="hljs-keyword">autocmd</span> VimEnter * PlugInstall | <span class="hljs-keyword">source</span> $MYVIMRC<br><span class="hljs-keyword">endif</span><br><br><span class="hljs-comment">&quot;&#125;&#125;&#125;</span><br><br><span class="hljs-string">&quot; ============= Plugins ============== &quot;</span>&#123;&#123;&#123;<br><br><span class="hljs-keyword">call</span> plug#begin(<span class="hljs-built_in">expand</span>(<span class="hljs-string">&#x27;~/.config/nvim/plugged&#x27;</span>))<br><span class="hljs-string">&quot; ================= looks and GUI stuff ================== &quot;</span>&#123;&#123;&#123;<br><br>Plug <span class="hljs-string">&#x27;joshdick/onedark.vim&#x27;</span>                                  <span class="hljs-comment">&quot; theme</span><br>Plug <span class="hljs-string">&#x27;vim-airline/vim-airline&#x27;</span>                               <span class="hljs-comment">&quot; theme</span><br>Plug <span class="hljs-string">&#x27;nvim-treesitter/nvim-treesitter&#x27;</span>, &#123;<span class="hljs-string">&#x27;do&#x27;</span>: <span class="hljs-string">&#x27;:TSUpdate&#x27;</span>&#125;  <span class="hljs-comment">&quot; Syntax highlighting</span><br><br><span class="hljs-comment">&quot;&#125;&#125;&#125;</span><br><span class="hljs-string">&quot; ================= Automatic complement ================== &quot;</span>&#123;&#123;&#123;<br><br>Plug <span class="hljs-string">&#x27;neovim/nvim-lspconfig&#x27;</span><br>Plug <span class="hljs-string">&#x27;hrsh7th/cmp-nvim-lsp&#x27;</span><br>Plug <span class="hljs-string">&#x27;hrsh7th/cmp-buffer&#x27;</span><br>Plug <span class="hljs-string">&#x27;hrsh7th/cmp-path&#x27;</span><br>Plug <span class="hljs-string">&#x27;hrsh7th/cmp-cmdline&#x27;</span><br>Plug <span class="hljs-string">&#x27;hrsh7th/nvim-cmp&#x27;</span><br><br><span class="hljs-comment">&quot; For vsnip users.</span><br>Plug <span class="hljs-string">&#x27;hrsh7th/cmp-vsnip&#x27;</span><br>Plug <span class="hljs-string">&#x27;hrsh7th/vim-vsnip&#x27;</span><br><br><span class="hljs-comment">&quot; For luasnip users.</span><br><span class="hljs-comment">&quot; Plug &#x27;L3MON4D3/LuaSnip&#x27;</span><br><span class="hljs-comment">&quot; Plug &#x27;saadparwaiz1/cmp_luasnip&#x27;</span><br><br><span class="hljs-comment">&quot; For ultisnips users.</span><br><span class="hljs-comment">&quot; Plug &#x27;SirVer/ultisnips&#x27;</span><br><span class="hljs-comment">&quot; Plug &#x27;quangnguyen30192/cmp-nvim-ultisnips&#x27;</span><br><br><span class="hljs-comment">&quot; For snippy users.</span><br><span class="hljs-comment">&quot; Plug &#x27;dcampos/nvim-snippy&#x27;</span><br><span class="hljs-comment">&quot; Plug &#x27;dcampos/cmp-snippy&#x27;</span><br><br><span class="hljs-comment">&quot;&#125;&#125;&#125;</span><br><br>Plug <span class="hljs-string">&#x27;kyazdani42/nvim-web-devicons&#x27;</span>                          <span class="hljs-comment">&quot; optional, for file icons</span><br>Plug <span class="hljs-string">&#x27;kyazdani42/nvim-tree.lua&#x27;</span>                              <span class="hljs-comment">&quot; file tree</span><br>Plug <span class="hljs-string">&#x27;fatih/vim-go&#x27;</span>                                          <span class="hljs-comment">&quot; Go</span><br>Plug <span class="hljs-string">&#x27;kyazdani42/nvim-web-devicons&#x27;</span>                          <span class="hljs-comment">&quot; Recommended (for coloured icons)</span><br>Plug <span class="hljs-string">&#x27;akinsho/bufferline.nvim&#x27;</span>, &#123; <span class="hljs-string">&#x27;tag&#x27;</span>: <span class="hljs-string">&#x27;v2.*&#x27;</span> &#125;            <span class="hljs-comment">&quot; tab </span><br>Plug <span class="hljs-string">&#x27;moll/vim-bbye&#x27;</span>                                         <span class="hljs-comment">&quot; tab close</span><br>Plug <span class="hljs-string">&#x27;windwp/nvim-autopairs&#x27;</span>                                 <span class="hljs-comment">&quot; autopairs</span><br><br><span class="hljs-keyword">call</span> plug#end()<br><br><span class="hljs-comment">&quot;&#125;&#125;&#125;</span><br><br><span class="hljs-string">&quot; ============= General ============== &quot;</span>&#123;&#123;&#123;<br><br><span class="hljs-keyword">set</span> mouse=<span class="hljs-keyword">a</span>                                                  <span class="hljs-comment">&quot; enable mouse scrolling</span><br><span class="hljs-keyword">set</span> clipboard^=unnamed,unnamedplus                           <span class="hljs-comment">&quot; Cross-platform value for copy-paste</span><br><span class="hljs-keyword">set</span> incsearch ignorecase smartcase hlsearch                  <span class="hljs-comment">&quot; highlight text while searching</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">history</span>=<span class="hljs-number">1000</span>                                             <span class="hljs-comment">&quot; history limit</span><br><span class="hljs-keyword">set</span> <span class="hljs-keyword">number</span>                                                   <span class="hljs-comment">&quot; enable numbers on the left</span><br><span class="hljs-keyword">set</span> relativenumber                                           <span class="hljs-comment">&quot; current line is 0</span><br><span class="hljs-keyword">set</span> noshowmode                                               <span class="hljs-comment">&quot; dont show current mode below statusline</span><br><span class="hljs-keyword">set</span> termguicolors<br><span class="hljs-keyword">set</span> showmatch                                                <span class="hljs-comment">&quot; Show matching brackets/parenthesis</span><br><span class="hljs-keyword">set</span> noswapfile                                               <span class="hljs-comment">&quot; no swap files</span><br><span class="hljs-keyword">set</span> noundofile                                               <span class="hljs-comment">&quot; no undo files</span><br><span class="hljs-keyword">set</span> nobackup                                                 <span class="hljs-comment">&quot; no backup files</span><br><br><span class="hljs-comment">&quot;&#125;&#125;&#125;</span><br><br><span class="hljs-string">&quot; ============= Formatting ============== &quot;</span>&#123;&#123;&#123;<br><br><span class="hljs-keyword">set</span> encoding=utf-<span class="hljs-number">8</span>                                           <span class="hljs-comment">&quot; text encoding</span><br><span class="hljs-keyword">set</span> tabstop=<span class="hljs-number">4</span> softtabstop=<span class="hljs-number">4</span> <span class="hljs-built_in">shiftwidth</span>=<span class="hljs-number">4</span> autoindent          <span class="hljs-comment">&quot; tab width</span><br><span class="hljs-keyword">set</span> expandtab smarttab                                       <span class="hljs-comment">&quot; tab key actions</span><br><span class="hljs-keyword">set</span> splitright                                               <span class="hljs-comment">&quot; open vertical split to the right</span><br><span class="hljs-keyword">set</span> splitbelow                                               <span class="hljs-comment">&quot; open horizontal split to the bottom</span><br><br><span class="hljs-comment">&quot;&#125;&#125;&#125;</span><br><br><span class="hljs-string">&quot; ============= Formatting ============== &quot;</span>&#123;&#123;&#123;<br><br><span class="hljs-comment">&quot; general</span><br><span class="hljs-keyword">let</span> mapleader = <span class="hljs-string">&quot;\&lt;space&gt;&quot;</span><br><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;leader&gt;</span>q :q!<span class="hljs-symbol">&lt;CR&gt;</span><br><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;leader&gt;</span><span class="hljs-keyword">w</span> :<span class="hljs-keyword">w</span><span class="hljs-symbol">&lt;CR&gt;</span><br><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;leader&gt;</span><span class="hljs-keyword">wq</span> :<span class="hljs-keyword">wq</span><span class="hljs-symbol">&lt;CR&gt;</span><br><span class="hljs-comment">&quot; window</span><br><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;A-j&gt;</span> <span class="hljs-symbol">&lt;C-w&gt;</span><span class="hljs-keyword">j</span><br><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;A-h&gt;</span> <span class="hljs-symbol">&lt;C-w&gt;</span>h<br><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;A-k&gt;</span> <span class="hljs-symbol">&lt;C-w&gt;</span><span class="hljs-keyword">k</span><br><span class="hljs-keyword">nnoremap</span> <span class="hljs-symbol">&lt;A-l&gt;</span> <span class="hljs-symbol">&lt;C-w&gt;</span><span class="hljs-keyword">l</span><br><span class="hljs-keyword">noremap</span> <span class="hljs-symbol">&lt;A-m&gt;</span> :NvimTreeToggle<span class="hljs-symbol">&lt;CR&gt;</span><br><span class="hljs-comment">&quot; bufferline</span><br><span class="hljs-keyword">noremap</span> <span class="hljs-symbol">&lt;C-h&gt;</span> :BufferLineCyclePrev<span class="hljs-symbol">&lt;CR&gt;</span> <br><span class="hljs-keyword">noremap</span> <span class="hljs-symbol">&lt;C-l&gt;</span> :BufferLineCycleNext<span class="hljs-symbol">&lt;CR&gt;</span> <br><span class="hljs-keyword">noremap</span> <span class="hljs-symbol">&lt;C-x&gt;</span> :Bdelete!<span class="hljs-symbol">&lt;CR&gt;</span> <br><br><span class="hljs-comment">&quot;&#125;&#125;&#125;</span><br><br><br><span class="hljs-string">&quot; ============= Themeing ============== &quot;</span>&#123;&#123;&#123;<br><span class="hljs-keyword">syntax</span> <span class="hljs-keyword">on</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:airline_theme</span>=<span class="hljs-string">&#x27;onedark&#x27;</span><br><span class="hljs-keyword">let</span> <span class="hljs-variable">g:onedark_termcolors</span>=<span class="hljs-number">256</span><br><span class="hljs-keyword">colorscheme</span> onedark<br><br><span class="hljs-comment">&quot;&#125;&#125;&#125;</span><br><br><br><span class="hljs-string">&quot; ============= nvim-treesitte ============== &quot;</span>&#123;&#123;&#123;<br><br><span class="hljs-keyword">lua</span> &lt;&lt;EOF<br>require<span class="hljs-string">&#x27;nvim-treesitter.configs&#x27;</span>.setup &#123;<br>  -- A <span class="hljs-keyword">list</span> of parser names, <span class="hljs-built_in">or</span> <span class="hljs-string">&quot;all&quot;</span><br>  ensure_installed = &#123; <span class="hljs-string">&quot;go&quot;</span>, <span class="hljs-string">&quot;lua&quot;</span>, <span class="hljs-string">&quot;gomod&quot;</span> , <span class="hljs-string">&quot;gowork&quot;</span> , <span class="hljs-string">&quot;json&quot;</span> &#125;,<br><br>  -- Install parsers synchronously (<span class="hljs-keyword">only</span> applied <span class="hljs-keyword">to</span> `ensure_installed`)<br>  sync_install = false,<br><br>  -- Automatically install missing parsers when entering <span class="hljs-keyword">buffer</span><br>  auto_install = true,<br><br>  -- List of parsers <span class="hljs-keyword">to</span> ignore installing (<span class="hljs-keyword">for</span> <span class="hljs-string">&quot;all&quot;</span>)<br>  ignore_install = &#123; &#125;,<br><br>  ---- If you need <span class="hljs-keyword">to</span> <span class="hljs-keyword">change</span> the installation directory of the parsers (see -&gt; Advanced Setup)<br>  -- parser_install_dir = <span class="hljs-string">&quot;/some/path/to/store/parsers&quot;</span>, -- Remember <span class="hljs-keyword">to</span> run <span class="hljs-keyword">vim</span>.<span class="hljs-keyword">opt</span>.runtimepath:<span class="hljs-keyword">append</span>(<span class="hljs-string">&quot;/some/path/to/store/parsers&quot;</span>)!<br><br>  <span class="hljs-keyword">highlight</span> = &#123;<br>    -- `false` will disable the whole extension<br>    enable = true,<br><br>    -- NOTE: these are the names of the parsers <span class="hljs-built_in">and</span> not the <span class="hljs-keyword">filetype</span>. (<span class="hljs-keyword">for</span> example <span class="hljs-keyword">if</span> you want <span class="hljs-keyword">to</span><br>    -- disable highlighting <span class="hljs-keyword">for</span> the `tex` <span class="hljs-keyword">filetype</span>, you need <span class="hljs-keyword">to</span> include `latex` in this <span class="hljs-keyword">list</span> <span class="hljs-keyword">as</span> this <span class="hljs-keyword">is</span><br>    -- the name of the parser)<br>    -- <span class="hljs-keyword">list</span> of <span class="hljs-keyword">language</span> that will <span class="hljs-keyword">be</span> disabled<br>    disable = &#123;  &#125;,<br><br>    -- Setting this <span class="hljs-keyword">to</span> true will run `:h <span class="hljs-keyword">syntax</span>` <span class="hljs-built_in">and</span> tree-sitter at the same time.<br>    -- Set this <span class="hljs-keyword">to</span> `true` <span class="hljs-keyword">if</span> you depend <span class="hljs-keyword">on</span> <span class="hljs-string">&#x27;syntax&#x27;</span> being enabled (like <span class="hljs-keyword">for</span> indentation).<br>    -- Using this option may slow down your editor, <span class="hljs-built_in">and</span> you may see some duplicate highlights.<br>    -- Instead of true it can also <span class="hljs-keyword">be</span> <span class="hljs-keyword">a</span> <span class="hljs-keyword">list</span> of languages<br>    additional_vim_regex_highlighting = false,<br>  &#125;,<br>  -- 启用增量选择<br>  incremental_selection = &#123;<br>    enable = true,<br>    keymaps = &#123;<br>      init_selection = <span class="hljs-string">&#x27;&lt;CR&gt;&#x27;</span>,<br>      node_incremental = <span class="hljs-string">&#x27;&lt;CR&gt;&#x27;</span>,<br>      node_decremental = <span class="hljs-string">&#x27;&lt;BS&gt;&#x27;</span>,<br>      scope_incremental = <span class="hljs-string">&#x27;&lt;TAB&gt;&#x27;</span>,<br>    &#125;<br>  &#125;,<br>&#125;<br>-- 开启 Folding<br><span class="hljs-keyword">vim</span>.wo.foldmethod = <span class="hljs-string">&#x27;expr&#x27;</span><br><span class="hljs-keyword">vim</span>.wo.foldexpr = <span class="hljs-string">&#x27;nvim_treesitter#foldexpr()&#x27;</span><br>-- 默认不要折叠<br>-- https://stackoverflow.<span class="hljs-keyword">com</span>/questions/<span class="hljs-number">8316139</span>/how-<span class="hljs-keyword">to</span>-<span class="hljs-keyword">set</span>-the-default-<span class="hljs-keyword">to</span>-unfolded-when-you-<span class="hljs-keyword">open</span>-<span class="hljs-keyword">a</span>-<span class="hljs-keyword">file</span><br><span class="hljs-keyword">vim</span>.wo.<span class="hljs-built_in">foldlevel</span> = <span class="hljs-number">99</span><br>EOF<br><br><span class="hljs-comment">&quot;&#125;&#125;&#125;</span><br><br><br><br><span class="hljs-string">&quot; ================= Automatic complement ================== &quot;</span>&#123;&#123;&#123;<br><br><span class="hljs-keyword">set</span> completeopt=<span class="hljs-keyword">menu</span>,menuone,noselect<br><span class="hljs-keyword">lua</span> &lt;&lt;EOF<br>  -- Set <span class="hljs-keyword">up</span> nvim-cmp.<br>  local cmp = require<span class="hljs-string">&#x27;cmp&#x27;</span><br>  cmp.setup(&#123;<br>    snippet = &#123;<br>      -- REQUIRED - you must specify <span class="hljs-keyword">a</span> snippet engine<br>      <span class="hljs-built_in">expand</span> = <span class="hljs-keyword">function</span>(<span class="hljs-keyword">args</span>)<br>        <span class="hljs-keyword">vim</span>.fn[<span class="hljs-string">&quot;vsnip#anonymous&quot;</span>](<span class="hljs-keyword">args</span>.body) -- For `vsnip` users.<br>        -- require(<span class="hljs-string">&#x27;luasnip&#x27;</span>).lsp_expand(<span class="hljs-keyword">args</span>.body) -- For `luasnip` users.<br>        -- require(<span class="hljs-string">&#x27;snippy&#x27;</span>).expand_snippet(<span class="hljs-keyword">args</span>.body) -- For `snippy` users.<br>        -- <span class="hljs-keyword">vim</span>.fn[<span class="hljs-string">&quot;UltiSnips#Anon&quot;</span>](<span class="hljs-keyword">args</span>.body) -- For `ultisnips` users.<br>      end,<br>    &#125;,<br>    window = &#123;<br>      -- completion = cmp.config.window.bordered(),<br>      -- documentation = cmp.config.window.bordered(),<br>    &#125;,<br>    mapping = cmp.mapping.preset.<span class="hljs-keyword">insert</span>(&#123;<br>      -- 上一个<br>      [<span class="hljs-string">&#x27;&lt;C-k&gt;&#x27;</span>] = cmp.mapping.select_prev_item(),<br>      -- 下一个<br>      [<span class="hljs-string">&#x27;&lt;C-j&gt;&#x27;</span>] = cmp.mapping.select_next_item(),<br>      [<span class="hljs-string">&#x27;&lt;A-.&gt;&#x27;</span>] = cmp.mapping.<span class="hljs-built_in">complete</span>(),<br>      [<span class="hljs-string">&#x27;&lt;C-e&gt;&#x27;</span>] = cmp.mapping.abort(),<br>      [<span class="hljs-string">&#x27;&lt;CR&gt;&#x27;</span>] = cmp.mapping.<span class="hljs-keyword">confirm</span>(&#123; select = true ,<br>      behavior = cmp.ConfirmBehavior.Install &#125;), -- Accept currently selected item. Set `select` <span class="hljs-keyword">to</span> `false` <span class="hljs-keyword">to</span> <span class="hljs-keyword">only</span> <span class="hljs-keyword">confirm</span> explicitly selected <span class="hljs-built_in">items</span>.<br>    &#125;),<br><br>    sources = cmp.config.sources(&#123;<br>      &#123; name = <span class="hljs-string">&#x27;nvim_lsp&#x27;</span> &#125;,<br>      &#123; name = <span class="hljs-string">&#x27;vsnip&#x27;</span> &#125;, -- For vsnip users.<br>      -- &#123; name = <span class="hljs-string">&#x27;luasnip&#x27;</span> &#125;, -- For luasnip users.<br>      -- &#123; name = <span class="hljs-string">&#x27;ultisnips&#x27;</span> &#125;, -- For ultisnips users.<br>      -- &#123; name = <span class="hljs-string">&#x27;snippy&#x27;</span> &#125;, -- For snippy users.<br>    &#125;, &#123;<br>      &#123; name = <span class="hljs-string">&#x27;buffer&#x27;</span> &#125;,<br>    &#125;)<br>  &#125;)<br><br>  -- Set configuration <span class="hljs-keyword">for</span> specific <span class="hljs-keyword">filetype</span>.<br>  cmp.setup.<span class="hljs-keyword">filetype</span>(<span class="hljs-string">&#x27;gitcommit&#x27;</span>, &#123;<br>    sources = cmp.config.sources(&#123;<br>      &#123; name = <span class="hljs-string">&#x27;cmp_git&#x27;</span> &#125;, -- You can specify the `cmp_git` <span class="hljs-keyword">source</span> <span class="hljs-keyword">if</span> you were installed it.<br>    &#125;, &#123;<br>      &#123; name = <span class="hljs-string">&#x27;buffer&#x27;</span> &#125;,<br>    &#125;)<br>  &#125;)<br><br>  -- Use <span class="hljs-keyword">buffer</span> <span class="hljs-keyword">source</span> <span class="hljs-keyword">for</span> `/` (<span class="hljs-keyword">if</span> you enabled `native_menu`, this won<span class="hljs-string">&#x27;t work anymore).</span><br><span class="hljs-string">  cmp.setup.cmdline(&#x27;</span>/<span class="hljs-string">&#x27;, &#123;</span><br><span class="hljs-string">    mapping = cmp.mapping.preset.cmdline(),</span><br><span class="hljs-string">    sources = &#123;</span><br><span class="hljs-string">      &#123; name = &#x27;</span><span class="hljs-keyword">buffer</span><span class="hljs-string">&#x27; &#125;</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">  -- Use cmdline &amp; path source for &#x27;</span>:<span class="hljs-string">&#x27; (if you enabled `native_menu`, this won&#x27;</span>t work anymore).<br>  cmp.setup.cmdline(<span class="hljs-string">&#x27;:&#x27;</span>, &#123;<br>    mapping = cmp.mapping.preset.cmdline(),<br>    sources = cmp.config.sources(&#123;<br>      &#123; name = <span class="hljs-string">&#x27;path&#x27;</span> &#125;<br>    &#125;, &#123;<br>      &#123; name = <span class="hljs-string">&#x27;cmdline&#x27;</span> &#125;<br>    &#125;)<br>  &#125;)<br><br><br>  -- Set <span class="hljs-keyword">up</span> lspconfig.<br>  local capabilities = require(<span class="hljs-string">&#x27;cmp_nvim_lsp&#x27;</span>).update_capabilities(<span class="hljs-keyword">vim</span>.lsp.protocol.make_client_capabilities())<br>  -- Replace <span class="hljs-symbol">&lt;YOUR_LSP_SERVER&gt;</span> with each lsp server you<span class="hljs-string">&#x27;ve enabled.</span><br><span class="hljs-string">  require(&#x27;</span>lspconfig<span class="hljs-string">&#x27;)[&#x27;</span><span class="hljs-symbol">&lt;YOUR_LSP_SERVER&gt;</span><span class="hljs-string">&#x27;].setup &#123;</span><br><span class="hljs-string">    capabilities = capabilities</span><br><span class="hljs-string">  &#125;</span><br><span class="hljs-string">EOF</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&#125;&#125;&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot; ================= nvim-tree ================== &quot;&#123;&#123;&#123;</span><br><span class="hljs-string"></span><br><span class="hljs-string">lua &lt;&lt;EOF</span><br><span class="hljs-string">-- disable netrw at the very start of your init.lua (strongly advised)</span><br><span class="hljs-string">vim.g.loaded = 1</span><br><span class="hljs-string">vim.g.loaded_netrwPlugin = 1</span><br><span class="hljs-string"></span><br><span class="hljs-string">-- empty setup using defaults</span><br><span class="hljs-string">require(&quot;nvim-tree&quot;).setup()</span><br><span class="hljs-string">EOF</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&#125;&#125;&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot; ================= bufferline.nvim ================== &quot;&#123;&#123;&#123;</span><br><span class="hljs-string"></span><br><span class="hljs-string">lua &lt;&lt;EOF</span><br><span class="hljs-string">require(&quot;bufferline&quot;).setup&#123;&#125;</span><br><span class="hljs-string">-- 下面的配置是为了让标签的位置和vscode查不到</span><br><span class="hljs-string">local status, bufferline = pcall(require, &quot;bufferline&quot;)</span><br><span class="hljs-string">if not status then</span><br><span class="hljs-string">    vim.notify(&quot;没有找到 bufferline&quot;)</span><br><span class="hljs-string">  return</span><br><span class="hljs-string">end</span><br><span class="hljs-string">bufferline.setup(&#123;</span><br><span class="hljs-string">  options = &#123;</span><br><span class="hljs-string">    -- 关闭 Tab 的命令，这里使用 moll/vim-bbye 的 :Bdelete 命令</span><br><span class="hljs-string">    close_command = &quot;Bdelete! %d&quot;,</span><br><span class="hljs-string">    right_mouse_command = &quot;Bdelete! %d&quot;,</span><br><span class="hljs-string">    -- 侧边栏配置</span><br><span class="hljs-string">    -- 左侧让出 nvim-tree 的位置，显示文字 File Explorer</span><br><span class="hljs-string">    offsets = &#123;</span><br><span class="hljs-string">      &#123;</span><br><span class="hljs-string">        filetype = &quot;NvimTree&quot;,</span><br><span class="hljs-string">        text = &quot;File Explorer&quot;,</span><br><span class="hljs-string">        highlight = &quot;Directory&quot;,</span><br><span class="hljs-string">        text_align = &quot;left&quot;,</span><br><span class="hljs-string">      &#125;,</span><br><span class="hljs-string">    &#125;,</span><br><span class="hljs-string">    -- 使用 nvim 内置 LSP  后续课程会配置</span><br><span class="hljs-string">    diagnostics = &quot;nvim_lsp&quot;,</span><br><span class="hljs-string">    -- 可选，显示 LSP 报错图标</span><br><span class="hljs-string">    ---@diagnostic disable-next-line: unused-local</span><br><span class="hljs-string">    diagnostics_indicator = function(count, level, diagnostics_dict, context)</span><br><span class="hljs-string">      local s = &quot; &quot;</span><br><span class="hljs-string">      for e, n in pairs(diagnostics_dict) do</span><br><span class="hljs-string">        local sym = e == &quot;error&quot; and &quot; &quot; or (e == &quot;warning&quot; and &quot; &quot; or &quot;&quot;)</span><br><span class="hljs-string">        s = s .. n .. sym</span><br><span class="hljs-string">      end</span><br><span class="hljs-string">      return s</span><br><span class="hljs-string">    end,</span><br><span class="hljs-string">  &#125;,</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string">EOF</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&#125;&#125;&#125;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot; ================= autopairs ================== &quot;&#123;&#123;&#123;</span><br><span class="hljs-string"></span><br><span class="hljs-string">lua &lt;&lt; EOF</span><br><span class="hljs-string">require(&quot;nvim-autopairs&quot;).setup &#123;&#125;</span><br><span class="hljs-string">-- insert `(` after select function or method item for nvim-cmp</span><br><span class="hljs-string">local cmp_autopairs = require &quot;nvim-autopairs.completion.cmp&quot;</span><br><span class="hljs-string">local cmp_status_ok,cmp=pcall(require,&quot;cmp&quot;)</span><br><span class="hljs-string">if not cmp_status_ok then</span><br><span class="hljs-string">    return</span><br><span class="hljs-string">end</span><br><span class="hljs-string">cmp.event:on(&#x27;</span>confirm_done<span class="hljs-string">&#x27;, cmp_autopairs.on_confirm_done &#123;map_char = &#123;tex = &#x27;</span><span class="hljs-string">&#x27;&#125;&#125;)</span><br><span class="hljs-string">EOF</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;&#125;&#125;&#125;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>vim</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>踩坑记录</title>
    <link href="/2022/09/19/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/09/19/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>　　本文主要用于记录一些平时编码中遇到的一些坑（不定期更新）</p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h2 id="Unmarshal丢精度"><a href="#Unmarshal丢精度" class="headerlink" title="Unmarshal丢精度"></a>Unmarshal丢精度</h2><h3 id="坑点"><a href="#坑点" class="headerlink" title="坑点"></a>坑点</h3><p>　　在网上搜索map、json、struct相互转换的文章时，我们常常能够看到有许多的文章里都提到了用map[string]interface{}作为Unmarshal的接收参数，这种方法在大多数情况下都是可行的，但在某些情况下却会产生丢精度的问题。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>test := <span class="hljs-string">&quot;&#123;\&quot;id\&quot;:1888888888888888888&#125;&quot;</span><br>mp := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)<br>_ = json.Unmarshal([]<span class="hljs-type">byte</span>(test), &amp;mp)<br>fmt.Printf(<span class="hljs-string">&quot;%v&quot;</span>, mp[<span class="hljs-string">&quot;id&quot;</span>])<br>&#125;<br><span class="hljs-comment">// 1.8888888888888888e+18</span><br></code></pre></td></tr></table></figure><p><img src="/../img/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/1.jpg"></p><p>　　通过断点的方式我们发现上面的代码在经过了Unmarshal操作之后，原本json串中的数字由1888888888888888888变为了1888888888888888800，而正常打印的出来的结果则是1.8888888888888888e+18，这说明在Unmarshal的时候将id解析为了float64类型从而发生了精度丢失的情况。</p><p><img src="/../img/%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/2.jpg"></p><p>　　通过查看Unmarshal方法的注释我们可以发现对于一个numbers如果接收的类型是interface{}它会被解析为float64类型，这就会产生丢精度的风险。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>　　对于上诉问题json包也提供了UseNumber这种方式来解决，具体代码如下所示</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">var</span> batchDataFromJSON <span class="hljs-keyword">interface</span>&#123;&#125;<br>decoder := json.NewDecoder(bytes.NewReader([]<span class="hljs-type">byte</span>(batchData)))<br>decoder.UseNumber()<br>err = decoder.Decode(&amp;batchDataFromJSON)<br>tmpValue = batchDataFromJSON.(<span class="hljs-keyword">map</span>[<span class="hljs-type">string</span>]<span class="hljs-keyword">interface</span>&#123;&#125;)<br></code></pre></td></tr></table></figure><p>　　通过观看源码我们可以发下UseNumber其实就是将numbers转interface{}时用一个自定义的Number类型替换了float64类型，而Number的底层数据类型是string，只是实现了一个转换函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-comment">// UseNumber causes the Decoder to unmarshal a number into an interface&#123;&#125; as a</span><br><span class="hljs-comment">// Number instead of as a float64.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(dec *Decoder)</span></span> UseNumber() &#123; dec.d.useNumber = <span class="hljs-literal">true</span> &#125;<br><br><span class="hljs-comment">// A Number represents a JSON number literal.</span><br><span class="hljs-keyword">type</span> Number <span class="hljs-type">string</span><br><br><span class="hljs-comment">// String returns the literal text of the number.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(n Number)</span></span> String() <span class="hljs-type">string</span> &#123; <span class="hljs-keyword">return</span> <span class="hljs-type">string</span>(n) &#125;<br><br><span class="hljs-comment">// Float64 returns the number as a float64.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(n Number)</span></span> Float64() (<span class="hljs-type">float64</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> strconv.ParseFloat(<span class="hljs-type">string</span>(n), <span class="hljs-number">64</span>)<br>&#125;<br><br><span class="hljs-comment">// Int64 returns the number as an int64.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(n Number)</span></span> Int64() (<span class="hljs-type">int64</span>, <span class="hljs-type">error</span>) &#123;<br><span class="hljs-keyword">return</span> strconv.ParseInt(<span class="hljs-type">string</span>(n), <span class="hljs-number">10</span>, <span class="hljs-number">64</span>)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>探究Golang中的闭包</title>
    <link href="/2022/08/27/%E6%8E%A2%E7%A9%B6Golang%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/"/>
    <url>/2022/08/27/%E6%8E%A2%E7%A9%B6Golang%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="探究Golang中的闭包"><a href="#探究Golang中的闭包" class="headerlink" title="探究Golang中的闭包"></a>探究Golang中的闭包</h1><h2 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包?"></a>什么是闭包?</h2><p>​先看一个简单的例子</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>   <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fibonacci</span><span class="hljs-params">()</span></span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>   a, b := <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>      a, b = b, a+b<br>      <span class="hljs-keyword">return</span> a<br>   &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   f := Fibonacci()<br>   <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>      fmt.Printf(<span class="hljs-string">&quot;Fibonacci: %d\n&quot;</span>, f())<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Fibonacci: 1</span><br><span class="hljs-comment">Fibonacci: 1</span><br><span class="hljs-comment">Fibonacci: 2</span><br><span class="hljs-comment">Fibonacci: 3</span><br><span class="hljs-comment">Fibonacci: 5</span><br><span class="hljs-comment">Fibonacci: 8</span><br><span class="hljs-comment">Fibonacci: 13</span><br><span class="hljs-comment">Fibonacci: 21</span><br><span class="hljs-comment">Fibonacci: 34</span><br><span class="hljs-comment">Fibonacci: 55</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>　　这其实就是一个闭包的例子，我们可以发现，当一个函数引用了外部函数的一些变量时，在外部函数调用结束时，被引用的变量不会被释放。也就是说闭包捕获了这些变量，它不关心这些捕获了的变量是否已经超出了作用域，只要闭包还在使用它，这些变量就还会存在。</p><p>　　那么回到最开始的问题：什么是闭包？</p><p>　　go官方的解释是：Go 函数可以是一个闭包。闭包是一个函数值，它引用了函数体之外的变量。 这个函数可以对这个引用的变量进行访问和赋值；换句话说这个函数被“绑定”在这个变量上。</p><p>　　简单来说，闭包是由函数和与其相关的引用环境组合而成的实体。</p><p><img src="/../img/%E6%8E%A2%E7%A9%B6Golang%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/UML.jpg"></p><p>　　函数，指的是在闭包实际实现的时候，往往通过调用一个外部函数返回其内部函数来实现的。用户得到一个闭包，也等同于得到了这个内部函数，每次执行这个闭包就等同于执行内部函数。</p><p>　　引用环境可以简单理解为在函数外部定义但在函数内被引用的变量。闭包跟函数最大的不同在于，当捕捉闭包的时候，它的所引用的外部变量会在捕捉时被确定，这样即便脱离了捕捉时的上下文，它也能照常运行。</p><h2 id="闭包的意义"><a href="#闭包的意义" class="headerlink" title="闭包的意义"></a>闭包的意义</h2><p>　　我们会发现，使用普通函数和全局变量完全可以实现和闭包相同的功能<br>​<strong>为什么不用全局变量？</strong></p><p>　　缩小变量作用域，减少对全局变量的污染。上面的斐波那契闭包如果用全局变量进行实现，全局变量容易被其他人污染。<br>​　　同时，如果我要实现n个闭包，如果我使用全局变量，就需要维护n个函数对应的全局变量。</p><h1 id="闭包示例"><a href="#闭包示例" class="headerlink" title="闭包示例"></a>闭包示例</h1><h2 id="闭包修改变量"><a href="#闭包修改变量" class="headerlink" title="闭包修改变量"></a>闭包修改变量</h2><p>　　闭包对它作用域上部的变量可以进行修改，修改引用的变量会对变量进行实际修改，通过下面的例子来理解：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   x := <span class="hljs-number">1</span><br>   y := <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>      x += <span class="hljs-number">1</span><br>      <span class="hljs-keyword">return</span> x<br>   &#125;()<br>   fmt.Println(<span class="hljs-string">&quot;main:&quot;</span>, x, y)<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="闭包记忆效应"><a href="#闭包记忆效应" class="headerlink" title="闭包记忆效应"></a>闭包记忆效应</h2><p>　　被捕获到闭包中的变量让闭包本身拥有了记忆效应，闭包中的逻辑可以修改闭包捕获的变量，变量会跟随闭包生命期一直存在，闭包本身就如同变量一样拥有了记忆效应。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>   <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fibonacci</span><span class="hljs-params">()</span></span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>   a, b := <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>      a, b = b, a+b<br>      <span class="hljs-keyword">return</span> a<br>   &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   f1, f2 := Fibonacci(), Fibonacci()<br>   <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>      fmt.Printf(<span class="hljs-string">&quot;Fibonacci: %d %d\n&quot;</span>, f1(), f2())<br>   &#125;<br>   fmt.Println(&amp;f1, &amp;f2)<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">Fibonacci: 1 1</span><br><span class="hljs-comment">Fibonacci: 1 1</span><br><span class="hljs-comment">Fibonacci: 2 2</span><br><span class="hljs-comment">Fibonacci: 3 3</span><br><span class="hljs-comment">Fibonacci: 5 5</span><br><span class="hljs-comment">Fibonacci: 8 8</span><br><span class="hljs-comment">Fibonacci: 13 13</span><br><span class="hljs-comment">Fibonacci: 21 21</span><br><span class="hljs-comment">Fibonacci: 34 34</span><br><span class="hljs-comment">Fibonacci: 55 55</span><br><span class="hljs-comment">0xc0000ae018 0xc0000ae020</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><img src="/../img/%E6%8E%A2%E7%A9%B6Golang%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/%E9%A3%9E%E4%B9%A620220828-205229.jpg"></p><h1 id="闭包使用场景"><a href="#闭包使用场景" class="headerlink" title="闭包使用场景"></a>闭包使用场景</h1><h2 id="隔离数据"><a href="#隔离数据" class="headerlink" title="隔离数据"></a>隔离数据</h2><p>　　假设你想创建一个函数，该函数可以访问即使在函数退出后仍然存在的数据。举个例子，如果你想统计函数被调用的次数，但不希望其他任何人访问该数据（这样他们就不会意外更改它)，你就可以用闭包来实现它：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">&quot;fmt&quot;</span><br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fibonacci</span><span class="hljs-params">()</span></span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">int</span>) &#123;<br>   a, b, total := <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> (<span class="hljs-type">int</span>, <span class="hljs-type">int</span>) &#123;<br>      a, b = b, a+b<br>      total++<br>      <span class="hljs-keyword">return</span> a, total<br>   &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   f := Fibonacci()<br>   <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++ &#123;<br>      a, total := f()<br>      fmt.Printf(<span class="hljs-string">&quot;Fibonacci: %d,total: %d\n&quot;</span>, a, total)<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="搭配defer使用"><a href="#搭配defer使用" class="headerlink" title="搭配defer使用"></a>搭配defer使用</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>   <span class="hljs-string">&quot;fmt&quot;</span><br>   <span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   startedAt := time.Now()<br>   <span class="hljs-keyword">defer</span> fmt.Println(time.Since(startedAt))<br><br>   time.Sleep(time.Second)<br>&#125;<br><span class="hljs-comment">// 187ns</span><br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>   <span class="hljs-string">&quot;fmt&quot;</span><br>   <span class="hljs-string">&quot;time&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   startedAt := time.Now()<br>   <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123; fmt.Println(time.Since(startedAt)) &#125;()<br><br>   time.Sleep(time.Second)<br>&#125;<br><span class="hljs-comment">// 1.003496286s</span><br></code></pre></td></tr></table></figure><p>　　defer 会立刻拷贝函数中引用的外部参数，所以 time.Since(startedAt) 的结果不是在 main 函数退出之前计算的，而是在 defer 关键字调用时计算的。为了获得符合预期的结果，可以往defer里传入一个闭包，虽然也是值传递，但是因为拷贝的是函数指针，所以可以得到预期结果。<br>​　　<strong>下面的例子会输出什么？</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Go"><br><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>   <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f1</span><span class="hljs-params">()</span></span> (result <span class="hljs-type">int</span>) &#123;<br>   <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>      result++<br>   &#125;()<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f2</span><span class="hljs-params">()</span></span> (r <span class="hljs-type">int</span>) &#123;<br>   t := <span class="hljs-number">5</span><br>   <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>      t = t + <span class="hljs-number">5</span><br>   &#125;()<br>   <span class="hljs-keyword">return</span> t<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">f3</span><span class="hljs-params">()</span></span> (r <span class="hljs-type">int</span>) &#123;<br>   <span class="hljs-keyword">defer</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(r <span class="hljs-type">int</span>)</span></span> &#123;<br>      r = r + <span class="hljs-number">5</span><br>   &#125;(r)<br>   <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   fmt.Println(f1(), f2(), f3())<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="闭包常见的坑"><a href="#闭包常见的坑" class="headerlink" title="闭包常见的坑"></a>闭包常见的坑</h1><h2 id="for-range-中使用闭包"><a href="#for-range-中使用闭包" class="headerlink" title="for range 中使用闭包"></a>for range 中使用闭包</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs Go"><br><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>   <span class="hljs-string">&quot;fmt&quot;</span><br>   <span class="hljs-string">&quot;sync&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   s := []<span class="hljs-type">string</span>&#123;<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;c&quot;</span>&#125;<br>   <span class="hljs-keyword">var</span> wg sync.WaitGroup<br>   <span class="hljs-keyword">for</span> i, v := <span class="hljs-keyword">range</span> s &#123;<br>      wg.Add(<span class="hljs-number">1</span>)<br>      <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>         fmt.Println(i, v)<br>         wg.Done()<br>      &#125;()<br>   &#125;<br>   wg.Wait()<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">2 c</span><br><span class="hljs-comment">2 c</span><br><span class="hljs-comment">2 c</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="循环闭包引用"><a href="#循环闭包引用" class="headerlink" title="循环闭包引用"></a>循环闭包引用</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-keyword">var</span> funcSlice []<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span><br>   <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++ &#123;<br>      funcSlice = <span class="hljs-built_in">append</span>(funcSlice, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>         <span class="hljs-built_in">println</span>(i)<br>      &#125;)<br><br>   &#125;<br>   <span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++ &#123;<br>      funcSlice[j]()<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>　　<strong>会输出什么？</strong></p><p>　　每次 append 操作仅将匿名函数放入到列表中，但并未执行，并且引用的变量都是 i，随着 i 的改变匿名函数中的 i 也在改变，所以当执行这些函数时，他们读取的都是环境变量 i 最后一次的值。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><h3 id="声明新变量"><a href="#声明新变量" class="headerlink" title="声明新变量"></a>声明新变量</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Go"><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-keyword">var</span> funcSlice []<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span><br>   <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++ &#123;<br>      i := i<br>      funcSlice = <span class="hljs-built_in">append</span>(funcSlice, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>         <span class="hljs-built_in">println</span>(i)<br>      &#125;)<br><br>   &#125;<br>   <span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++ &#123;<br>      funcSlice[j]()<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>声明新变量：j :&#x3D; i，且把之后对 i 的操作改为对 j 操作。</p></li><li><p>声明新同名变量：i :&#x3D; i。注意：这里短声明右边是外层作用域的 i，左边是新声明的作用域在这一层的 i。原理同上。</p></li></ul><p>这相当于为这三个函数各声明一个变量，一共三个，这三个变量初始值分别对应循环中的 i 并且之后不会再改变。</p><h3 id="声明新匿名函数并传参"><a href="#声明新匿名函数并传参" class="headerlink" title="声明新匿名函数并传参"></a>声明新匿名函数并传参</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs Go">- <span class="hljs-keyword">package</span> main<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   <span class="hljs-keyword">var</span> funcSlice []<span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span><br>   <span class="hljs-keyword">for</span> i := <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++ &#123;<br>      <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(i <span class="hljs-type">int</span>)</span></span> &#123;<br>         funcSlice = <span class="hljs-built_in">append</span>(funcSlice, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>            <span class="hljs-built_in">println</span>(i)<br>         &#125;)<br>      &#125;(i)<br><br>   &#125;<br>   <span class="hljs-keyword">for</span> j := <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++ &#123;<br>      funcSlice[j]() <span class="hljs-comment">// 0, 1, 2</span><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>　　现在 println(i)使用的 i是通过函数参数传递进来的，并且 Go 语言的函数参数是按值传递的。<br>​　　现在相当于在这个新的匿名函数内声明了三个变量，被三个闭包函数独立引用。原理跟第一种方法是一样的。</p><h1 id="闭包的实现"><a href="#闭包的实现" class="headerlink" title="闭包的实现"></a>闭包的实现</h1><h2 id="定义后立即被调用"><a href="#定义后立即被调用" class="headerlink" title="定义后立即被调用"></a>定义后立即被调用</h2><p>　　因为只会被使用一次，所以应该力图避免闭包对象的内存分配操作，那怎么优化一下呢，以下面的示例代码为例。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(a <span class="hljs-type">int</span>)</span></span> &#123;<br>    <span class="hljs-built_in">println</span>(byval)<br>    byref++<br>&#125;(<span class="hljs-number">42</span>)<br></code></pre></td></tr></table></figure><p>　　在文章开头我们提到过闭包跟函数最大的不同在于，当捕捉闭包的时候，它的所引用的外部变量会在捕捉时被确定，这样即便脱离了捕捉时的上下文，它也能照常运行。如果闭包在定义后立即被调用，那它不会存在脱离上下文的使用场景，这时候其实可以将它转为简单函数的调用形式。<br>上面的闭包将被转换为简单函数调用的形式：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(byval <span class="hljs-type">int</span>, &amp;byref *<span class="hljs-type">int</span>, a <span class="hljs-type">int</span>)</span></span> &#123;<br>    <span class="hljs-built_in">println</span>(byval)<br>    (*&amp;byref)++<br>&#125;(byval, &amp;byref, <span class="hljs-number">42</span>)<br></code></pre></td></tr></table></figure><p>　　我们注意到byval是值捕获，byref是引用捕获，这其实是根据变量在函数内部会不会被修改来决定的。我们知道在闭包内部修改变量会影响到外部环境，如果变量在闭包中会被修改，使用值捕获显然是不太合适的。</p><h2 id="定义后并不是立即调用"><a href="#定义后并不是立即调用" class="headerlink" title="定义后并不是立即调用"></a>定义后并不是立即调用</h2><p>这种情况下同一个闭包可能调用多次，这就需要创建闭包对象了，如何实现呢？</p><ul><li>如果变量是在函数内部不会被修改，并且该变量占用存储空间小于2*sizeof(int)，那么就通过在函数体内创建局部变量的形式来捕获的变量，相比于直接捕获变量地址，这么做的好处应该是考虑到减少引用数量、减少逃逸分析相关的计算。</li><li>如果变量在函数内部会被修改，或者变量占用存储空间较大（拷贝到本地做局部变量代价太大），则在捕获变量的地址。</li></ul><p><img src="/../img/%E6%8E%A2%E7%A9%B6Golang%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/ttt.svg" alt="image-UML"></p><h2 id="相关源码"><a href="#相关源码" class="headerlink" title="相关源码"></a>相关源码</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">transformclosure</span><span class="hljs-params">(xfunc *Node)</span></span> &#123;<br>   lno := lineno<br>   lineno = xfunc.Pos<br>   clo := xfunc.Func.Closure<br><br>   <span class="hljs-keyword">if</span> clo.Func.Top&amp;ctxCallee != <span class="hljs-number">0</span> &#123;<br>      <span class="hljs-comment">// If the closure is directly called, we transform it to a plain function call</span><br>      <span class="hljs-comment">// with variables passed as args. This avoids allocation of a closure object.</span><br>      <span class="hljs-comment">// Here we do only a part of the transformation. Walk of OCALLFUNC(OCLOSURE)</span><br>      <span class="hljs-comment">// will complete the transformation later.</span><br>      <span class="hljs-comment">// For illustration, the following closure:</span><br>      <span class="hljs-comment">// func(a int) &#123;</span><br>      <span class="hljs-comment">//    println(byval)</span><br>      <span class="hljs-comment">//    byref++</span><br>      <span class="hljs-comment">// &#125;(42)</span><br>      <span class="hljs-comment">// becomes:</span><br>      <span class="hljs-comment">// func(byval int, &amp;byref *int, a int) &#123;</span><br>      <span class="hljs-comment">//    println(byval)</span><br>      <span class="hljs-comment">//    (*&amp;byref)++</span><br>      <span class="hljs-comment">// &#125;(byval, &amp;byref, 42)</span><br><br>      <span class="hljs-comment">// f is ONAME of the actual function.</span><br>      f := xfunc.Func.Nname<br>    <br>      <span class="hljs-comment">// We are going to insert captured variables before input args.</span><br>      <span class="hljs-keyword">var</span> params []*types.Field<br>      <span class="hljs-keyword">var</span> decls []*Node<br>      <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> xfunc.Func.Cvars.Slice() &#123;<br>         <span class="hljs-keyword">if</span> !v.Name.Byval() &#123;<br>            <span class="hljs-comment">// If v of type T is captured by reference,</span><br>            <span class="hljs-comment">// we introduce function param &amp;v *T</span><br>            <span class="hljs-comment">// and v remains PAUTOHEAP with &amp;v heapaddr</span><br>            <span class="hljs-comment">// (accesses will implicitly deref &amp;v).</span><br>            addr := newname(lookup(<span class="hljs-string">&quot;&amp;&quot;</span> + v.Sym.Name))<br>            addr.Type = types.NewPtr(v.Type)<br>            v.Name.Param.Heapaddr = addr<br>            v = addr<br>         &#125;<br>    <br>         v.SetClass(PPARAM)<br>         decls = <span class="hljs-built_in">append</span>(decls, v)<br>    <br>         fld := types.NewField()<br>         fld.Nname = asTypesNode(v)<br>         fld.Type = v.Type<br>         fld.Sym = v.Sym<br>         params = <span class="hljs-built_in">append</span>(params, fld)<br>      &#125;<br>    <br>      <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(params) &gt; <span class="hljs-number">0</span> &#123;<br>         <span class="hljs-comment">// Prepend params and decls.</span><br>         f.Type.Params().SetFields(<span class="hljs-built_in">append</span>(params, f.Type.Params().FieldSlice()...))<br>         xfunc.Func.Dcl = <span class="hljs-built_in">append</span>(decls, xfunc.Func.Dcl...)<br>      &#125;<br>    <br>      dowidth(f.Type)<br>      xfunc.Type = f.Type <span class="hljs-comment">// update type of ODCLFUNC</span><br><br>   &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// The closure is not called, so it is going to stay as closure.</span><br>      <span class="hljs-keyword">var</span> body []*Node<br>      offset := <span class="hljs-type">int64</span>(Widthptr)<br>      <span class="hljs-keyword">for</span> _, v := <span class="hljs-keyword">range</span> xfunc.Func.Cvars.Slice() &#123;<br>         <span class="hljs-comment">// cv refers to the field inside of closure OSTRUCTLIT.</span><br>         cv := nod(OCLOSUREVAR, <span class="hljs-literal">nil</span>, <span class="hljs-literal">nil</span>)<br><br>         cv.Type = v.Type<br>         <span class="hljs-keyword">if</span> !v.Name.Byval() &#123;<br>            cv.Type = types.NewPtr(v.Type)<br>         &#125;<br>         offset = Rnd(offset, <span class="hljs-type">int64</span>(cv.Type.Align))<br>         cv.Xoffset = offset<br>         offset += cv.Type.Width<br>    <br>         <span class="hljs-keyword">if</span> v.Name.Byval() &amp;&amp; v.Type.Width &lt;= <span class="hljs-type">int64</span>(<span class="hljs-number">2</span>*Widthptr) &#123;<br>            <span class="hljs-comment">// If it is a small variable captured by value, downgrade it to PAUTO.</span><br>            v.SetClass(PAUTO)<br>            xfunc.Func.Dcl = <span class="hljs-built_in">append</span>(xfunc.Func.Dcl, v)<br>            body = <span class="hljs-built_in">append</span>(body, nod(OAS, v, cv))<br>         &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// Declare variable holding addresses taken from closure</span><br>            <span class="hljs-comment">// and initialize in entry prologue.</span><br>            addr := newname(lookup(<span class="hljs-string">&quot;&amp;&quot;</span> + v.Sym.Name))<br>            addr.Type = types.NewPtr(v.Type)<br>            addr.SetClass(PAUTO)<br>            addr.Name.SetUsed(<span class="hljs-literal">true</span>)<br>            addr.Name.Curfn = xfunc<br>            xfunc.Func.Dcl = <span class="hljs-built_in">append</span>(xfunc.Func.Dcl, addr)<br>            v.Name.Param.Heapaddr = addr<br>            <span class="hljs-keyword">if</span> v.Name.Byval() &#123;<br>               cv = nod(OADDR, cv, <span class="hljs-literal">nil</span>)<br>            &#125;<br>            body = <span class="hljs-built_in">append</span>(body, nod(OAS, addr, cv))<br>         &#125;<br>      &#125;<br>    <br>      <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(body) &gt; <span class="hljs-number">0</span> &#123;<br>         typecheckslice(body, ctxStmt)<br>         xfunc.Func.Enter.Set(body)<br>         xfunc.Func.SetNeedctxt(<span class="hljs-literal">true</span>)<br>      &#125;<br><br>   &#125;<br><br>   lineno = lno<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="变量捕获"><a href="#变量捕获" class="headerlink" title="变量捕获"></a>变量捕获</h2><p>那么具体是怎么捕获的呢？</p><p>　　在Go 语言中函数也是一种变量，和普通变量一样可以通过参数传递，可以做函数返回值。Go 语言把这样的函数变量称为 function value，它本质上是一个指针，指向一个 runtime.funcval 结构体，这个结构体保存了函数的入口地址。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">type</span> funcval <span class="hljs-keyword">struct</span> &#123;<br>   fn <span class="hljs-type">uintptr</span><br>   <span class="hljs-comment">// variable-size, fn-specific data here</span><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/../img/%E6%8E%A2%E7%A9%B6Golang%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/t.png"></p><p>　　举个例子：func A 的指令位于代码段的 addr1。由于 func A 对应的 function value 没有捕获列表，编译期间编译器会在只读数据段分配一个 function value 结构体，这个结构体本身的地址是 addr2 ，它保存了 func A 的地址 addr1，多次 func A 调用共享一个 funcval。执行阶段，addr2 会被赋予 f1 与 f2。执行 f1 就是通过 f1 找出对应的 funcval，进而拿到 func A 入口地址。</p><p><img src="/../img/%E6%8E%A2%E7%A9%B6Golang%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/tt.png"></p><p>　　<strong>为什么不直接通过addr1调用函数，而要添加一层中间层function value呢？</strong></p><p>　　这其实是为了支持闭包的实现，function value这一中间层方便我们将同一个函数绑定到不同的引用环境上。</p><p><img src="/../img/%E6%8E%A2%E7%A9%B6Golang%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/tttt.png"></p><p>　　通常来讲，局部变量都是分配在栈的，上图也是这样。但是，如果捕获变量的值会发生改变，Go 编译器会在堆上分配局部变量，栈上只保存一个地址。这就是所谓的“局部变量堆分配”。function value 的捕获列表保存局部变量的地址，这样闭包函数和外层函数就指向同一个变量了。</p><p><img src="/../img/%E6%8E%A2%E7%A9%B6Golang%E4%B8%AD%E7%9A%84%E9%97%AD%E5%8C%85/ttttt.png"></p><p>来看一个例子：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>   <span class="hljs-string">&quot;fmt&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fibonacci</span><span class="hljs-params">()</span></span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>   a, b := <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>      a, b = b, a+b<br>      <span class="hljs-keyword">return</span> a<br>   &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   f1, f2 := Fibonacci(), Fibonacci()<br>   fmt.Println(f1, f2)<br>&#125;<br><br></code></pre></td></tr></table></figure><p>　　<strong>上述代码会输出什么？</strong> </p><p>　　我们会发现它们输出的地址是一样的，不可思议。按道理每次分配新的funcval，地址是不可能相等的。其实fmt.Printf识别出f1和f2是函数变量后，把funcval.fn给打印出来了，打印的是函数的真实地址，而不是funcval的地址。<br>如果要查看真实地址，可以采用下面这种写法</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>   <span class="hljs-string">&quot;fmt&quot;</span><br>   <span class="hljs-string">&quot;unsafe&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Fibonacci</span><span class="hljs-params">()</span></span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>   a, b := <span class="hljs-number">0</span>, <span class="hljs-number">1</span><br>   <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> <span class="hljs-type">int</span> &#123;<br>      a, b = b, a+b<br>      <span class="hljs-keyword">return</span> a<br>   &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>   f1, f2 := Fibonacci(), Fibonacci()<br>   a1 := *(*<span class="hljs-type">uintptr</span>)(unsafe.Pointer(&amp;f1))<br>   a2 := *(*<span class="hljs-type">uintptr</span>)(unsafe.Pointer(&amp;f2))<br>   fmt.Println(a1, a2)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>　　闭包实际上就是一种语法糖机制，这种语法糖机制可以简化编程，比如，有时候对外部的变量进行访问，没这种语法糖机制将会编写冗余的代码。而这正也是可以把这种闭包机制归结为一种设计模式。但是由于使用闭包会导致代码不够清晰，使用不当还会导致得到错误的结果。所以一般不建议使用闭包。</p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="http://qiuyueqy.com/2020/06/21/go%E5%BA%95%E5%B1%82%E5%A4%A7%E5%86%92%E9%99%A9%E4%B9%8B%E9%97%AD%E5%8C%85/">Go底层大冒险之闭包</a></p><p><a href="https://www.bilibili.com/video/BV1ma4y1e7R5">eggo-tech</a></p><p><a href="https://www.hitzhangjie.pro/blog/2018-05-19-golang-function-closure%E5%AE%9E%E7%8E%B0%E6%9C%BA%E5%88%B6/">golang-function-closure实现机制</a></p><p><a href="https://www.php.cn/be/go/439940.html">golang闭包的作用</a></p><p><a href="https://segmentfault.com/a/1190000022798222">Go 语言闭包详解</a></p><p><a href="https://www.jianshu.com/p/ed3902ce5260">Go语言对象模型 之 闭包与函数变量</a></p>]]></content>
    
    
    <categories>
      
      <category>Go</category>
      
    </categories>
    
    
    <tags>
      
      <tag>闭包</tag>
      
      <tag>Go</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
